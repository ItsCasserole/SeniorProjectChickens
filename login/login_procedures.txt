DELIMITER //
CREATE FUNCTION user_login (username VARCHAR(45),
							password VARCHAR(45))
                            RETURNS INT
                            
BEGIN

	DECLARE current_user_id INT;
    DECLARE hashed_password VARCHAR(100);
    DECLARE user_salt VARCHAR(10);
    DECLARE user_password VARCHAR(100);
    SELECT user_ID INTO current_user_id FROM User
		WHERE name_string = username;
    
    IF current_user_id IS NOT NULL THEN
		SELECT password(concat(password, salt)) INTO hashed_password
			FROM User WHERE user_ID = current_user_id;
		SELECT auth_string INTO user_password FROM User
			WHERE user_ID = current_user_id;
            
		IF hashed_password != user_password THEN
			SET current_user_id = -1;
		END IF;
    ELSE
		SET current_user_id = -1;
	END IF;
	
	RETURN current_user_id;
END; //

DELIMITER ;

DELIMITER &&
CREATE FUNCTION changePassword(in_username VARCHAR(45), in_current_password VARCHAR(45), in_new_password VARCHAR(45), in_reenter VARCHAR(45))
RETURNS VARCHAR(45)
BEGIN
	DECLARE message VARCHAR(45);
    DECLARE userid INT;
    DECLARE storedCurrentPassword VARCHAR(200);
    DECLARE proposedCurrentPassword VARCHAR(200);
    DECLARE setSalt VARCHAR(6);
    SET message = "fail";
    
	SELECT user_ID INTO userid FROM User WHERE name_string = in_username;
    SELECT auth_string INTO storedCurrentPassword FROM User WHERE user_ID = userid;
    SELECT password(concat(in_current_password, salt)) INTO proposedCurrentPassword FROM User WHERE user_ID = userid;
    SELECT salt INTO setSalt FROM User WHERE user_ID = userid;
    
    IF userid IS NOT NULL THEN
		IF storedCurrentPassword = proposedCurrentPassword THEN
			IF in_current_password != in_new_password AND in_username != in_new_password AND in_new_password = in_reenter THEN
				UPDATE User SET auth_string = password(concat(in_new_password, setSalt)) WHERE user_ID = userid;
                SET message = "success";
            END IF;
        END IF;
    END IF;
    
    RETURN message;
END &&
DELIMITER ;
